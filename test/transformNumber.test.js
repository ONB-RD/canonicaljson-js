import BigNumber from 'bignumber.js';
import transformNumber from '../src/transformNumber';

function testTransformNumber(from, to) {
  expect(transformNumber(new BigNumber(from))).toBe(to);
}

test('represents all integers without a leading minus sign when the value is zero', () => {
  testTransformNumber(0, '0');
});

test('represents all integers without a decimal point, and without an exponent', () => {
  testTransformNumber('99999999999999999999999', '99999999999999999999999');

  testTransformNumber(
    '179.931348623159077293051907890247336179769789423065727343008115773267580550096313270847732240753602112011387987139335765878976881441662249474306394741243777678934248654852763022196012460941194530829520850057688381506823424628814739131105408272371633505106845862982399472459479716304835356329624224137217e306',
    '179931348623159077293051907890247336179769789423065727343008115773267580550096313270847732240753602112011387987139335765878976881441662249474306394741243777678934248654852763022196012460941194530829520850057688381506823424628814739131105408272371633505106845862982399472459479716304835356329624224137217000000'
  );
});

test('represents non negative zero', () => {
  ['0e0', '0.0', '0.00', '0.00e00', '-0'].forEach(n => {
    testTransformNumber(n, '0');
  });
});

test('represents all non-integers numbers in exponential notation', () => {
  testTransformNumber('0.1', '1E-1');

  testTransformNumber('11.1', '1.11E1');
});
